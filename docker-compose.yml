services: # 아래에서 설정한 컨테이너들을 하나로 묶어줌
  mysql:
    image: mysql:8.0 # docker mysql 이미지 버전
    container_name: spot-on-mysql # 컨테이너 이름
    environment: # mysql 환경변수
      MYSQL_ROOT_PASSWORD: 1234 # root 비밀번호
      MYSQL_DATABASE: spoton-backend # mysql database 이름
      TZ: Asia/Seoul # 시간을 서울 기준으로
    ports: # 포트 번호
      - "3307:3306"
    volumes: # 디비 저장소
      - db-data:/var/lib/mysql
    networks: # docker 컨테이너를 연결하고 호스트와 통신할 수 있도록 해줌
      - app-network
    restart: always # 종료되어도 자동으로 재실행

  spring:
    container_name: spot-on-application
    build:
      context: .
      dockerfile: Dockerfile
    image: dlgktmd0/spot-on
    environment:
      MYSQL_DATABASE: spoton-backend
      MYSQL_USER_NAME: root
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE_URL: jdbc:mysql://spot-on-mysql:3307/spoton-backend?rewriteBatchedStatements=true&profileSQL=true&logger=Slf4JLogger&maxQuerySizeToLog=999999
    expose:
      - 8080
    ports:
      - "8080:8080"
    depends_on:
      - spot-on-mysql
    networks:
      - app-network

#  test-db:
#      image: mysql:8.0
#      container_name: test-db
#      environment:
#        MYSQL_ROOT_PASSWORD: 1234
#        MYSQL_DATABASE: spoton-backend
#        TZ: Asia/Seoul
#      ports:
#        - "3308:3306"  # 다른 포트 사용 (3307이 이미 사용 중이라면)
#      networks:
#        - app-network
#      restart: always

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--storage.tsdb.path=/prometheus' # 메트릭 저장 경로
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: always
    networks:
      - app-network

  loki:
    image: grafana/loki
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki:/etc/loki
      - loki-data:/loki
    command:
      - '--config.file=/etc/loki/loki-config.yml'
      - '--config.expand-env=true'
    networks:
      - app-network

  promtail:
    image: grafana/promtail
    container_name: promtail
    volumes:
      - ./logs:/logs
      - ./promtail:/etc/promtail
      - promtail-data:/promtail
    command: '--config.file=/etc/promtail/promtail-config.yml'
    depends_on:
      - loki
    networks:
      - app-network

  alert_manager:
    image: prom/alertmanager
    container_name: alert-manager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager:/etc/alertmanager
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: always
    networks:
      - app-network

  node_exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro # /proc: 호스트의 프로세스 정보 디렉토리. CPU, 메모리 사용량 등과 관련된 정보를 제공합니다.
      - /sys:/host/sys:ro # sys: 호스트의 시스템 디렉토리. 하드웨어 정보와 시스템 상태를 제공합니다.
      - /:/rootfs:ro # /: 호스트의 루트 파일 시스템 전체. 디스크 사용량 등의 정보를 수집할 때 필요합니다.
    command:
      - '--path.procfs=/host/proc' # 컨테이너 내부에서 호스트의 /proc 데이터를 읽을 수 있도록 합니다.
      - '--path.rootfs=/rootfs' # Node Exporter가 호스트의 루트 파일 시스템(/)을 참조하도록 지정합니다.
      - '--path.sysfs=/host/sys' # Node Exporter가 /sys 디렉토리 대신 /host/sys을 참조하도록 지정합니다.
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)' # 특정 마운트 포인트를 제외하여 불필요한 메트릭 수집을 방지합니다.
    restart: always
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
volumes:
  db-data:
  prometheus-data:
  grafana-data:
  alertmanager-data:
  loki-data:
  promtail-data: